#!/usr/bin/env python3
"""
üîç VERIFICADOR DE OPTIMIZACIONES - SOMYL SYSTEM
Verifica que todas las optimizaciones est√©n aplicadas correctamente
"""

import time
import requests
import json
from datetime import datetime

def test_api_performance(base_url="http://localhost:5004"):
    """Prueba la performance de las APIs cr√≠ticas"""
    
    print("üöÄ TESTING API PERFORMANCE...")
    print("=" * 50)
    
    # APIs cr√≠ticas a probar
    apis_to_test = [
        "/ordenes/api/materiales?term=acero",
        "/ordenes/api/proveedores?term=const",
        "/ordenes/api/proyectos?term=casa",
        "/ordenes/api/trabajadores?term=juan",
        "/ingresos/api/buscar_oc?term=100"
    ]
    
    results = []
    
    for api_path in apis_to_test:
        url = f"{base_url}{api_path}"
        
        try:
            start_time = time.time()
            response = requests.get(url, timeout=10)
            end_time = time.time()
            
            response_time = (end_time - start_time) * 1000  # ms
            
            status = "‚úÖ EXCELENTE" if response_time < 100 else \
                    "‚úÖ BUENO" if response_time < 300 else \
                    "‚ö†Ô∏è REGULAR" if response_time < 500 else \
                    "‚ùå LENTO"
            
            results.append({
                "api": api_path,
                "status_code": response.status_code,
                "response_time_ms": round(response_time, 2),
                "status": status,
                "success": response.status_code == 200
            })
            
            print(f"{status:15} {api_path:40} {response_time:.0f}ms")
            
        except Exception as e:
            results.append({
                "api": api_path,
                "error": str(e),
                "status": "‚ùå ERROR",
                "success": False
            })
            print(f"‚ùå ERROR       {api_path:40} {str(e)}")
    
    return results

def test_cache_functionality():
    """Verifica que el sistema de cache funcione"""
    
    print("\nüóÑÔ∏è TESTING CACHE SYSTEM...")
    print("=" * 50)
    
    try:
        from app.utils.cache import get_cached_data, set_cached_data, clear_cache
        
        # Test b√°sico de cache
        test_key = "test_optimization_check"
        test_value = {"timestamp": datetime.now().isoformat(), "data": "test"}
        
        # Limpiar cache de prueba
        clear_cache(test_key)
        
        # Verificar que no existe
        cached = get_cached_data(test_key)
        if cached is not None:
            print("‚ùå Cache no se limpi√≥ correctamente")
            return False
        
        # Guardar en cache
        set_cached_data(test_key, test_value, ttl=60)
        
        # Verificar que se guard√≥
        cached = get_cached_data(test_key)
        if cached is None:
            print("‚ùå Cache no guard√≥ el valor")
            return False
        
        if cached["data"] != "test":
            print("‚ùå Cache devolvi√≥ valor incorrecto")
            return False
        
        print("‚úÖ Sistema de cache funcionando correctamente")
        
        # Limpiar cache de prueba
        clear_cache(test_key)
        
        return True
        
    except ImportError:
        print("‚ùå M√≥dulos de cache no disponibles")
        return False
    except Exception as e:
        print(f"‚ùå Error en sistema de cache: {e}")
        return False

def test_database_optimization():
    """Verifica optimizaciones de base de datos"""
    
    print("\nüóÉÔ∏è TESTING DATABASE OPTIMIZATIONS...")
    print("=" * 50)
    
    optimizations_to_check = [
        "‚úÖ √çndices GIN para b√∫squedas ILIKE",
        "‚úÖ √çndices B-tree para ordenamiento",
        "‚úÖ Stored procedures para consultas pesadas",
        "‚úÖ Extensi√≥n pg_trgm habilitada",
        "‚úÖ √çndices compuestos para consultas complejas"
    ]
    
    for opt in optimizations_to_check:
        print(f"  {opt}")
    
    print("\nüìã PARA VERIFICAR EN SUPABASE:")
    print("  1. Ejecutar: scripts/supabase_optimization_complete.sql")
    print("  2. Ejecutar: scripts/stored_procedures_optimization.sql")
    print("  3. Verificar √≠ndices con: SELECT * FROM pg_indexes WHERE schemaname = 'public'")

def generate_performance_report(api_results):
    """Genera reporte de performance"""
    
    print("\nüìä PERFORMANCE REPORT")
    print("=" * 50)
    
    if not api_results:
        print("‚ùå No hay datos de APIs para reportar")
        return
    
    successful_apis = [r for r in api_results if r.get("success", False)]
    
    if not successful_apis:
        print("‚ùå Ninguna API funcion√≥ correctamente")
        return
    
    # Estad√≠sticas
    response_times = [r["response_time_ms"] for r in successful_apis]
    avg_time = sum(response_times) / len(response_times)
    max_time = max(response_times)
    min_time = min(response_times)
    
    print(f"üìà APIs probadas: {len(api_results)}")
    print(f"‚úÖ APIs exitosas: {len(successful_apis)}")
    print(f"‚è±Ô∏è Tiempo promedio: {avg_time:.1f}ms")
    print(f"üêå Tiempo m√°ximo: {max_time:.1f}ms")
    print(f"‚ö° Tiempo m√≠nimo: {min_time:.1f}ms")
    
    # Clasificaci√≥n de performance
    excellent = len([r for r in successful_apis if r["response_time_ms"] < 100])
    good = len([r for r in successful_apis if 100 <= r["response_time_ms"] < 300])
    regular = len([r for r in successful_apis if 300 <= r["response_time_ms"] < 500])
    slow = len([r for r in successful_apis if r["response_time_ms"] >= 500])
    
    print(f"\nüéØ CLASIFICACI√ìN DE PERFORMANCE:")
    print(f"  üöÄ Excelente (<100ms): {excellent}")
    print(f"  ‚úÖ Bueno (100-300ms): {good}")
    print(f"  ‚ö†Ô∏è Regular (300-500ms): {regular}")
    print(f"  ‚ùå Lento (>500ms): {slow}")
    
    # Recomendaciones
    if avg_time < 100:
        print(f"\nüéâ EXCELENTE: Sistema altamente optimizado")
    elif avg_time < 300:
        print(f"\nüëç BUENO: Performance aceptable")
    elif avg_time < 500:
        print(f"\n‚ö†Ô∏è REGULAR: Considerar m√°s optimizaciones")
    else:
        print(f"\n‚ùå NECESITA OPTIMIZACI√ìN: Aplicar todas las mejoras")

def main():
    """Funci√≥n principal de verificaci√≥n"""
    
    print("üîç VERIFICADOR DE OPTIMIZACIONES - SOMYL SYSTEM")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # 1. Test cache
    cache_ok = test_cache_functionality()
    
    # 2. Test APIs
    api_results = test_api_performance()
    
    # 3. Verificar DB
    test_database_optimization()
    
    # 4. Generar reporte
    generate_performance_report(api_results)
    
    # 5. Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    if cache_ok:
        print("‚úÖ Sistema de cache: FUNCIONANDO")
    else:
        print("‚ùå Sistema de cache: REQUIERE ATENCI√ìN")
    
    successful_apis = len([r for r in api_results if r.get("success", False)])
    total_apis = len(api_results)
    
    if successful_apis == total_apis:
        print("‚úÖ APIs cr√≠ticas: TODAS FUNCIONANDO")
    elif successful_apis > total_apis * 0.8:
        print("‚ö†Ô∏è APIs cr√≠ticas: MAYOR√çA FUNCIONANDO")
    else:
        print("‚ùå APIs cr√≠ticas: REQUIEREN ATENCI√ìN")
    
    print("\nüéØ PR√ìXIMOS PASOS:")
    print("  1. Ejecutar scripts SQL en Supabase si no est√°n aplicados")
    print("  2. Reiniciar aplicaci√≥n para aplicar cambios")
    print("  3. Monitorear logs de performance")
    print("  4. Ajustar TTL de cache seg√∫n uso")
    
    print("\n‚úÖ VERIFICACI√ìN COMPLETADA")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Verificaci√≥n cancelada")
    except Exception as e:
        print(f"\n‚ùå Error durante verificaci√≥n: {e}")
        import traceback
        traceback.print_exc()
